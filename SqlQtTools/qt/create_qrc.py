import os
import argparse
import json
import subprocess
from pathlib import Path
from xml.etree.ElementTree import ElementTree, Element, SubElement, tostring, indent
from typing import List, Dict


class AdvancedQRCGenerator:
    def __init__(self, config_file='qrc_config.json'):
        self.config = self.load_config(config_file)
        self.project_root = Path(self.config.get('project_root', '.'))
        self.output_file = self.config.get('output_file', 'resources.qrc')
        self.include_patterns = self.config.get('include_patterns', [
            '*.ico', '*.png', '*.jpg', '*.jpeg', '*.gif', '*.bmp',
            '*.svg', '*.css', '*.qss', '*.qm', '*.ttf', '*.otf',
            '*.json', '*.xml', '*.txt'
        ])
        self.exclude_patterns = self.config.get('exclude_patterns', [
            '__pycache__', '.git', '.vscode', '.idea', 'venv', 'env',
            'node_modules', 'dist', 'build', '*.pyc', '*.pyo', '*.log',
            '*.tmp', '*.bak', '*.swp'
        ])
        self.prefix_mapping = self.config.get('prefix_mapping', {
            'icons': '/icons',
            'images': '/images',
            'styles': '/styles',
            'fonts': '/fonts',
            'translations': '/translations',
            'sounds': '/sounds',
            'data': '/data',
            'ui': '/ui'
        })
        self.custom_aliases = self.config.get('custom_aliases', {})

    def load_config(self, config_file: str) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        default_config = {
            "project_root": ".",
            "output_file": "resources.qrc",
            "include_patterns": [
                "*.ico", "*.png", "*.jpg", "*.jpeg", "*.gif", "*.bmp",
                "*.svg", "*.css", "*.qss", "*.qm", "*.ttf", "*.otf",
                "*.json", "*.xml", "*.txt"
            ],
            "exclude_patterns": [
                "__pycache__", ".git", ".vscode", ".idea", "venv", "env",
                "node_modules", "dist", "build", "*.pyc", "*.pyo", "*.log",
                "*.tmp", "*.bak", "*.swp"
            ],
            "prefix_mapping": {
                "icons": "/icons",
                "images": "/images",
                "styles": "/styles",
                "fonts": "/fonts",
                "translations": "/translations",
                "sounds": "/sounds",
                "data": "/data",
                "ui": "/ui"
            },
            "custom_aliases": {
                "favicon.ico": "app_icon.ico",
                "main_style.css": "style.css"
            }
        }

        if os.path.exists(config_file):
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

        return default_config

    def save_config(self, config_file: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        config = {
            "project_root": str(self.project_root),
            "output_file": self.output_file,
            "include_patterns": self.include_patterns,
            "exclude_patterns": self.exclude_patterns,
            "prefix_mapping": self.prefix_mapping,
            "custom_aliases": self.custom_aliases
        }

        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)

    def is_excluded(self, path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å –ø—É—Ç—å"""
        path_str = str(path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for pattern in self.exclude_patterns:
            if pattern.startswith('*.'):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
                if path_str.endswith(pattern[1:]):
                    return True
            elif pattern in path_str:
                return True

        return False

    def is_included(self, path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª"""
        if not path.is_file():
            return False

        if self.is_excluded(path):
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for pattern in self.include_patterns:
            if pattern.startswith('*.'):
                if path.suffix.lower() == pattern[1:].lower():
                    return True
            elif pattern == path.name:
                return True

        return False

    def get_alias(self, file_path: Path) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–ª–∏–∞—Å –¥–ª—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω"""
        filename = file_path.name
        return self.custom_aliases.get(filename, filename)

    def determine_prefix(self, file_path: Path) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞"""
        relative_path = file_path.relative_to(self.project_root)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º mapping –ø–æ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
        for folder_name, prefix in self.prefix_mapping.items():
            if folder_name in str(relative_path.parent):
                return prefix

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–∏
        parent_name = relative_path.parent.name
        if parent_name and parent_name != '.':
            return f"/{parent_name}"

        return "/"

    def scan_project(self) -> List[Path]:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è"""
        resource_files = []

        print(f"üîç –°–∫–∞–Ω–∏—Ä—É—é –ø—Ä–æ–µ–∫—Ç: {self.project_root}")

        for root, dirs, files in os.walk(self.project_root):
            root_path = Path(root)

            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞
            dirs[:] = [d for d in dirs if not self.is_excluded(root_path / d)]

            for file in files:
                file_path = root_path / file
                if self.is_included(file_path):
                    resource_files.append(file_path)

        return sorted(resource_files)

    def generate_qrc(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç .qrc —Ñ–∞–π–ª"""
        resource_files = self.scan_project()

        if not resource_files:
            print("‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ—Å—É—Ä—Å—ã")
            return 0

        # –°–æ–∑–¥–∞–µ–º XML —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        rcc = Element('RCC', version='1.0')

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º
        files_by_prefix: Dict[str, List[Path]] = {}
        for file_path in resource_files:
            prefix = self.determine_prefix(file_path)
            if prefix not in files_by_prefix:
                files_by_prefix[prefix] = []
            files_by_prefix[prefix].append(file_path)

        # –î–æ–±–∞–≤–ª—è–µ–º qresource –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞
        for prefix, files in sorted(files_by_prefix.items()):
            qresource = SubElement(rcc, 'qresource', prefix=prefix)
            for file_path in sorted(files):
                relative_path = file_path.relative_to(self.project_root)
                file_elem = SubElement(qresource, 'file')
                file_elem.text = str(relative_path)

                # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–∏–∞—Å –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
                alias = self.get_alias(file_path)
                if alias != file_path.name:
                    file_elem.set('alias', alias)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º XML
        rough_string = tostring(rcc)
        tree = ElementTree(rcc)
        indent(tree, space="\t", level=0)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(self.output_file, 'w', encoding='utf-8') as f:
            f.write('<!DOCTYPE RCC>\n')
        with open(self.output_file, 'ab') as f:
            ElementTree(rcc).write(f, xml_declaration=False)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.save_config('qrc_config.json')

        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {self.output_file}")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(resource_files)}")
        print(f"   –ü—Ä–µ—Ñ–∏–∫—Å–æ–≤: {len(files_by_prefix)}")

        for prefix, files in sorted(files_by_prefix.items()):
            print(f"   {prefix}: {len(files)} —Ñ–∞–π–ª–æ–≤")

        return len(resource_files)

    def create_rcc(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ rcc –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏–º–µ–Ω–∞ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞
            compilers = ['pyrcc5', 'rcc', 'pyside2-rcc', 'pyside6-rcc']
            compiler = None

            for c in compilers:
                try:
                    subprocess.run([c, '--version'], capture_output=True, check=True)
                    compiler = c
                    print(f"–ù–∞–π–¥–µ–Ω –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä: {compiler}")
                    break
                except (subprocess.CalledProcessError, FileNotFoundError):
                    continue

            if not compiler:
                raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤")

            res_file = f'{os.path.splitext(self.output_file)[0]}.py'

            # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≤ .rcc
            cmd = [compiler, '-binary', self.output_file, '-o', res_file]
            print(f"–í—ã–ø–æ–ª–Ω—è–µ–º: {' '.join(cmd)}")

            result = subprocess.run(cmd, capture_output=True, text=True)

            if result.returncode == 0:
                print("‚úÖ .rcc —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                print(f"–†–∞–∑–º–µ—Ä: {os.path.getsize(res_file)} bytes")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: {result.stderr}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")


def main():
    parser = argparse.ArgumentParser(description='–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä .qrc —Ñ–∞–π–ª–æ–≤')
    parser.add_argument('--root', default='.', help='–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞')
    parser.add_argument('--output', default='resources.qrc', help='–í—ã—Ö–æ–¥–Ω–æ–π .qrc —Ñ–∞–π–ª')
    parser.add_argument('--config', default='qrc_config.json', help='–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--init', action='store_true', help='–°–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥')

    args = parser.parse_args()

    if args.init:
        generator = AdvancedQRCGenerator()
        generator.save_config(args.config)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: {args.config}")
        return

    generator = AdvancedQRCGenerator(args.config)
    generator.project_root = Path(args.root)
    generator.output_file = args.output

    generator.generate_qrc()
    generator.create_rcc()


if __name__ == "__main__":
    """
    # –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
    python advanced_qrc_generator.py --init
    
    # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –∫–æ–Ω—Ñ–∏–≥–æ–º
    python advanced_qrc_generator.py --config my
    """

    main()
